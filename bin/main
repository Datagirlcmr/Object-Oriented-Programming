#!/usr/bin/env ruby
require "./lib/player.rb"
require "./lib/board.rb"
class Game
    def initialize(player1_name,player2_name)
        
        @player1 =Player.new(1,player1_name)
        @player2 =Player.new(2,player2_name)
        @playing=true
        @player=nil
        @board = Board.new
        
    end

    def play
        puts "Game start"
        player = @player1
        while @playing
            puts @board.display      
            puts "#{player.name} It is your turn to play"
            moves_error = true
            while moves_error
                puts "Select a move from the available moves: "
                puts @board.availables 
                num = gets.chomp.to_i
                num = num- 1
                if num >= 0 && num <= 8
                    if @board.available?(num)
                        moves_error = false
                        @board.moves[num] = player.symbol
                    else
                        errors("invalid_num")
                    end
                else
                    errors("invalid_num")
                end
            end
             game_end(player)
             player= turn(player)   
        end   
    end

    def turn(player)
        if player.number == @player1.number
            player = @player2
        else
            player = @player1
        end
        player
    end

    def game_end(player)
        finish = false
        if is_a_win?
            puts @board.display
            puts @board.win_display(player) 
            @playing = false
            return
        elsif !@board.free_moves
            @playing = false
        else
            puts "Its A Draw....."
            puts ""
            puts "Game has Ended"
            finish = true
        end
    end

    def is_a_win?
        wins =[];
        wins << row1 = @board.moves[0].to_s + @board.moves[1].to_s + @board.moves[2].to_s # X+X+X => XXX // OOO
        wins << row2 = @board.moves[3].to_s + @board.moves[4].to_s + @board.moves[5].to_s
        wins << row3 = @board.moves[6].to_s + @board.moves[7].to_s + @board.moves[8].to_s
        wins << col1 = @board.moves[0].to_s + @board.moves[3].to_s + @board.moves[6].to_s
        wins << col2 = @board.moves[1].to_s + @board.moves[4].to_s + @board.moves[7].to_s
        wins << col3 = @board.moves[2].to_s + @board.moves[5].to_s + @board.moves[8].to_s
        wins << diag1 = @board.moves[0].to_s + @board.moves[4].to_s + @board.moves[8].to_s
        wins << diag2 = @board.moves[2].to_s + @board.moves[4].to_s + @board.moves[6].to_s
        
        player1_win = "XXX"
        player2_win = "OOO"
        wins.each do |x|
            if x== player1_win || x== player2_win
                return true
            end
        end
        return false
    end

    def errors(code)
        errors = {
            invalid_num: "Sorry. Your move is not available. Please try again"
        }

        if errors[code.to_sym]
            puts errors[code.to_sym]
        else
            puts "Oops! error code not found!"
        end
    end
end




puts "Welcome to TIC TAC Toe"
puts "Tic-tac-toe is a game for two players, X and O, who take turns marking 
the spaces in a 3Ã—3 grid. The player who succeeds in placing 
three of their marks in a horizontal, vertical, or diagonal row is the winner."

puts "Hello Player 1. What's your Name?"
player1_name = gets.chomp
puts "Welcome #{player1_name} Your symbol is X"

puts "Hello Player 2. What's your Name?"
player2_name = gets.chomp
puts "Welcome #{player2_name} Your symbol is O"

game = Game.new(player1_name,player2_name)
game.play
# check = Board.new
# p check.free_moves

